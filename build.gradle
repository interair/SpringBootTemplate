buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "gradle.plugin.org.detoeuf:swagger-codegen-plugin:1.7.4"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
    }
}

plugins {
    id "net.ltgt.apt-eclipse" version "0.13"
    id "net.ltgt.apt-idea" version "0.13"
    id "net.ltgt.apt" version "0.13"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "com.moowork.node" version "1.2.0"
}


apply plugin: 'java'
sourceCompatibility=1.8
targetCompatibility=1.8

apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'propdeps'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

dependencyManagement {
  imports {
    mavenBom 'org.springframework:spring-framework-bom:5.0.5.RELEASE'
  }
}

defaultTasks 'bootRun'

group = 'io.github.pronto.markov'
version = '0.0.1-SNAPSHOT'

description = ''


bootJar {
    launchScript()
}

springBoot {
    mainClassName = 'io.github.pronto.markov.MarkovTextGeneratorApp'
    buildInfo()
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

apply from: 'gradle/liquibase.gradle'

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.16.20'
    apt "org.projectlombok:lombok:1.16.20"
    compile "org.apache.commons:commons-lang3:3.7"
    compile "org.apache.commons:commons-io:1.3.2"
    compile "com.ryantenney.metrics:metrics-spring:3.1.3"
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-annotation"
    compile "io.dropwizard.metrics:metrics-json"
    compile "io.dropwizard.metrics:metrics-jvm"
    compile "io.dropwizard.metrics:metrics-servlet"
    compile "io.dropwizard.metrics:metrics-servlets"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "javax.transaction:javax.transaction-api"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.liquibase:liquibase-core"
    compile "org.springframework.boot:spring-boot-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile ("org.springframework.boot:spring-boot-starter-web") {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile "org.springframework:spring-context-support"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "io.jsonwebtoken:jjwt:0.9.0"
    compile ("io.springfox:springfox-swagger2:2.8.0")
    compile ("io.springfox:springfox-swagger-ui:2.8.0")
    compile "io.springfox:springfox-bean-validators:2.8.0"
    compile "mysql:mysql-connector-java"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"

    compile("com.h2database:h2")
    testCompile "com.jayway.jsonpath:json-path"
    testCompile ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "org.hamcrest:hamcrest-library"
    optional ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

task stage(dependsOn: 'bootRepackage') {
}

if (project.hasProperty('nodeInstall')) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources,bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
